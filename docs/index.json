[
{
	"uri": "http://spdldaemon.github.io/docs/tools/kicad/usingkicad/",
	"title": "Using KiCad",
	"tags": [],
	"description": "",
	"content": "KiCad is pretty powerful, and as with many open-source software, can sometimes have a steep learning curve. For the purposes of use in lab, the rest of this tutorial will focus on things you might use reasonably often. The detailed information can always be found in the KiCad documentation.\nThat being said, your life will be enormously easier if you get used to some of the keyboard shortcuts for navigation.\nShortcut keys KiCad has two kinds of related but different shortcut keys: accelerator keys and hotkeys. Both are used to speed up working in KiCad by using the keyboard instead of the mouse to change commands.\nAccelerator keys Accelerator keys have the same effect as clicking on a menu or toolbar icon: the command will be entered but nothing will happen until the left mouse button is clicked. Use an accelerator key when you want to enter a command mode but do not want any immediate action.\nAccelerator keys are shown on the right side of all menu panes:\nHotkeys A hotkey is equal to an accelerator key plus a left mouse click. Using a hotkey starts the command immediately at the current cursor location. Use a hotkey to quickly change commands without interrupting your workflow.\nTo view hotkeys within any KiCad tool go to Help\r\rList Hotkeys or press Ctrl+F1:\nYou can edit the assignment of hotkeys, and import or export them, from the Preferences\r\rHotkeys Options menu.\nIn this document, keypresses are expressed with styling like this: a. If you see a, just type the \u0026ldquo;a\u0026rdquo; key on the keyboard.\n Example Consider the simple example of adding a wire in a schematic.\nTo use an accelerator key, press Shift+W to invoke the \u0026ldquo;Add wire\u0026rdquo; command (note the cursor will change). Next, left click on the desired wire start location to begin drawing the wire.\nWith a hotkey, simply press w and the wire will immediately start from the current cursor location.\nGetting Around By default, the mouse wheel zooms in and out. Holding Shift while scrolling will scroll the page up and down, while holding Ctrl will scroll left and right. Panning can also be done by holding down the middle mouse button (wheel) and dragging.\nStarting a New Project Each project in KiCad needs a dedicated directory, and has a *.pro file defining the project. To create a project, go to the KiCad man window, then select File\r\rNew\r\rProject\u0026hellip; or simply press Ctrl+N. When making the project, leave the checkbox to create a new directory ticked unless you already have a dedicated directory.\n"
},
{
	"uri": "http://spdldaemon.github.io/docs/tools/kicad/schematiccapture/",
	"title": "Schematic Capture",
	"tags": [],
	"description": "",
	"content": "Eeschema EEschema is KiCad's schematic capture and annotation tool; this is where you'll be drawing your schematics by placing components and hooking them up. If you haven't already, start or open a project to hold the schematic.\nBefore stepping through this tutorial, download the teensy.lib symbol library from https://github.com/XenGi/teensy_library.\nSome useful shortcuts The keyboard shortcuts you'll be using most frequently for schematics are:\n a - add a component. c - copy a component. w - wire components together. e - edit a component. v - edit component value. Esc - escape any command in progress. Ctrl+z - undo. Ctrl+s - save.  Creating a Schematic   Let’s begin by creating a schematic. Start the schematic editor Eeschema, . It is the first button from the left.\n  Click on the \u0026lsquo;Page Settings\u0026rsquo; icon on the top toolbar. Set the appropriate paper size (\u0026lsquo;A4\u0026rsquo;,\u0026lsquo;8.5x11\u0026rsquo;, etc.) and enter the Title as \u0026lsquo;Tutorial\u0026rsquo;. You will see that more information can be entered here if necessary. Click OK. This information will populate the schematic sheet at the bottom right corner. Use the mouse wheel to zoom in. Save the whole schematic: File\r\rSave\n  We will now place our first component. Click on the \u0026lsquo;Place symbol\u0026rsquo; icon in the right toolbar. You may also press the \u0026lsquo;Add Symbol\u0026rsquo; hotkey a.\n  Click on the middle of your schematic sheet. A Choose Symbol window will appear on the screen. Note that several thousand schematic symbols may be loaded, so make frequent use of search.\n  Once you use a symbol, it will be listed at the top with other recently used symbols, making filling in passives easier.\n We’re going to place a resistor. Search / filter on the \u0026lsquo;R\u0026rsquo; of Resistor. You may notice the \u0026lsquo;Device\u0026rsquo; heading above the Resistor. This \u0026lsquo;Device\u0026rsquo; heading is the name of the library where the component is located, which is quite a generic and useful library.\n Double click on it. This will close the Choose Symbol window. Place the component in the schematic sheet by clicking where you want it to be.\n  Try to hover the mouse over the component \u0026lsquo;R\u0026rsquo; and press r. The component should rotate. You do not need to actually click on the component to rotate it.\n  Sometimes, if your mouse is also over something else, a menu will appear. You will see the Clarify Selection menu often in KiCad; it allows working on objects that are on top of each other. In this case, tell KiCad you want to perform the action on the \u0026lsquo;Symbol …​R…​\u0026rsquo; if the menu appears.\n Right click in the middle of the component and select Properties\r\rEdit Value. You can achieve the same result by hovering over the component and pressing v. Alternatively, e will take you to the more general Properties window. Notice how the right-click menu below shows the hotkeys for all available actions.  The Edit Value Field window will appear. Replace the current value \u0026lsquo;R\u0026rsquo; with \u0026lsquo;1k\u0026rsquo;. Click OK  Do not change the Reference field (R?), this will be done automatically later on. The value above the resistor should now be \u0026lsquo;1k\u0026rsquo;.\n  To place another resistor, simply click where you want the resistor to appear. The symbol selection window will appear again.\n  The resistor you previously chose is now in your history list, appearing as \u0026lsquo;R\u0026rsquo;. Click OK and place the component.\n  In case you make a mistake and want to delete a component, right click on the component and click \u0026lsquo;Delete\u0026rsquo;. This will remove the component from the schematic. Alternatively, you can hover over the component you want to delete and press Del.\n  You can also duplicate a component already on your schematic sheet by hovering over it and pressing c. Click where you want to place the new duplicated component.\n  Right click on the second resistor. Select \u0026lsquo;Drag\u0026rsquo;. Reposition the component and left click to drop. The same functionality can be achieved by hovering over the component and by pressing g. r will rotate the component while x and y will flip it about its x- or y-axis.\n  Right-Click  Move or m is also a valuable option for moving anything around, but it is better to use this only for component labels and components yet to be connected. This is because Drag keeps wire connections to the component attached while moving, while Move simply moves the components, leaving the wires behind. Both can be useful, but Drag is more often what you want.\n  Edit the second resistor by hovering over it and pressing v. Replace \u0026lsquo;R\u0026rsquo; with \u0026lsquo;100\u0026rsquo;. You can undo any of your editing actions with Ctrl+Z.\n  Change the grid size. You have probably noticed that on the schematic sheet all components are snapped onto a large pitch grid. You can easily change the size of the grid by Right-Click\r\rGrid.\n  In general, it is recommended to use a grid of 50.0 mils for the schematic sheet.\n  We are going to add a Teensy to our circuit, which does not have a symbol natively in KiCad. Copy teensy.lib into the KiCad project folder. In the EEschema menu, choose Preferences\r\rManage Symbol Libraries. In the Symbol Libraries window you can see two tabs: Global Libraries and Project Specific Libraries. Each one has one sym-lib-table file. For a library (.lib file) to be available it must be in one of those sym-lib-table files. If you have a library file in your file system and it’s not yet available, you can add it to either one of the sym-lib-table files. We will now add the Teensy library.\n  Select the Project Specific table. Click the Browse Libraries\u0026hellip; button below the table. Since you placed the library in the project folder, you should be able to choose and add the teensy.lib library and close the window. It will be added to the end of of the list. If you wish you can click its nickname and change it, but \u0026lsquo;teensy\u0026rsquo; is fine for now. Close the Symbol Libraries window with OK.\n  Repeat the add-component steps, however this time select the \u0026lsquo;teensya\u0026rsquo; library instead of the \u0026lsquo;Device\u0026rsquo; library and pick the \u0026lsquo;Teensy-LC\u0026rsquo; component.\n  Hover the mouse over the microcontroller component. Notice that x and y again flip the component. Keep the symbol mirrored around the Y axis so that pins 5 and 6 (\u0026lsquo;3_RX1_PWM_Touch\u0026rsquo; and \u0026lsquo;4_TX1_PWM_Touch\u0026rsquo;) point to the right.\n  Repeat the add-component steps, this time choosing the \u0026lsquo;Device\u0026rsquo; library and picking the \u0026lsquo;LED\u0026rsquo; component from it.\n  Add another component, this time \u0026lsquo;Conn_01x03_Male\u0026rsquo;. This is a generic 3-pin connector.\n  Organise all components on your schematic sheet as shown below.\n  The component identifier \u0026lsquo;J?\u0026rsquo; will appear above the \u0026lsquo;Conn_01x03_Male\u0026rsquo; label. If you want to change its position, right click on \u0026lsquo;J?\u0026rsquo; and click on \u0026lsquo;Move Field\u0026rsquo; (equivalent to m). It might be helpful to zoom in before/while doing this. Reposition \u0026lsquo;J?\u0026rsquo; under the component as shown below. Labels can be moved around as many times as you please.   It is time to place the power and ground symbols. Click on the \u0026lsquo;Place power port\u0026rsquo; button on the right toolbar. Alternatively, press p. In the component selection window, scroll down and select \u0026lsquo;VCC\u0026rsquo; from the \u0026lsquo;power\u0026rsquo; library. Click OK.\n  Click above the pin of the 1k resistor to place the VCC part. Click on the area above and to the left of the Teensy. In the \u0026lsquo;Component Selection history\u0026rsquo; section select \u0026lsquo;VCC\u0026rsquo; and place it to the left of the microcontroller. Repeat the add process again and place a VCC part above pin 1 of the connector. Move references and values out of the way if needed.\n  Repeat the add-pin steps but this time select the GND part. Place a GND part under pin 3 of the connector. Place another GND symbol below and to the left of the microcontroller. Your schematic should now look something like this:\n  Next, we will wire all our components. Click on the \u0026lsquo;Place wire\u0026rsquo; icon on the right toolbar.  Be careful not to pick \u0026lsquo;Place bus\u0026rsquo;, which appears directly beneath this button but has thicker lines and is blue. For more on how to use bus connections refer to the full KiCad Documentation.\n Click on the little circle at the end of pin 5 of the microcontroller and then click on the little circle on pin 1 of the LED. Click once when you are drawing the wire to create a corner. You can zoom in while you are placing the connection.  If you want to reposition wired components, it is important to use g (to grab) and not m (to move). Using grab will keep the wires connected.\n Repeat this process and wire up all the other components as shown below. To terminate a wire just double-click. When wiring up the VCC and GND symbols, the wire should touch the bottom of the VCC symbol and the middle top of the GND symbol. See the screenshot below.   We will now consider an alternative way of making a connection using labels. Pick a net labelling tool by clicking on the \u0026lsquo;Place net label\u0026rsquo; icon on the right toolbar. You can also use l.\n  Click in the middle of the wire connected to pin 6 of the microcontroller. Name this label \u0026lsquo;INPUT\u0026rsquo;. The label is still an independent item which you can for example move, rotate and delete. The small anchor rectangle of the label must be exactly on a wire or a pin for the label to take effect.\n  Follow the same procedure and place another label on the wire to pin 2 of the connector. Also name it \u0026lsquo;INPUT\u0026rsquo;. The two labels, having the same name, create an invisible connection between pin 2 of the connector and the 100 ohm resistor. This is a useful technique when connecting wires in a complex design where drawing the lines would make the whole schematic messier. To place a label you do not necessarily need a wire, you can simply attach the label to a pin.\n  Labels can also be used to simply label wires for informative purposes. Place a label on pin 5 of the PIC. Enter the name \u0026lsquo;uCtoLED\u0026rsquo;. Name the wire between the resistor and the LED as \u0026lsquo;LEDtoR\u0026rsquo;.\n  You do not have to label the VCC and GND lines because the labels are implied from the power objects they are connected to.\n  Below you can see what the final result should look like.\n   Sometimes it is good to write comments here and there. To add comments on the schematic use the \u0026lsquo;Place text\u0026rsquo; icon on the right toolbar.\n  All components now need to have unique identifiers. In fact, many of our components are still named \u0026lsquo;R?\u0026rsquo; or \u0026lsquo;J?'. Identifier assignation can be done automatically by clicking on the \u0026lsquo;Annotate schematic symbols\u0026rsquo; icon ~annotate symbols icon on the top toolbar.\n  In the Annotate Schematic window, select \u0026lsquo;Use the entire schematic\u0026rsquo; and click on the \u0026lsquo;Annotate\u0026rsquo; button. Click \u0026lsquo;Close\u0026rsquo;. Notice how all the \u0026lsquo;?\u0026rsquo; have been replaced with numbers. Each identifier is now unique. In our example, they have been named \u0026lsquo;R1\u0026rsquo;, \u0026lsquo;R2\u0026rsquo;, \u0026lsquo;U1\u0026rsquo;, \u0026lsquo;D1\u0026rsquo; and \u0026lsquo;J1\u0026rsquo;.\n  If you're just capturing the schematic for documentation purposes, this schematic is now finished. Hit Ctrl+s to save, and you're done! If you want a PDF version, either select \u0026lsquo;Print\u0026rsquo; and print to a pdf printer, or select \u0026lsquo;Plot\u0026rsquo; and set the output format to PDF.\n  Additional steps to run ERC KiCad can also run an electrical rules check (ERC) to catch obvious mistakes; to do this, we need to make some more annotations to tell KiCad what we're doing.\n  First deal with unconnected wires. Any pin or wire that is not connected will generate a warning when checked by KiCad. To avoid these warnings you can either instruct the program that the unconnected wires are deliberate or manually flag each unconnected wire or pin as unconnected.\n  Click on the \u0026lsquo;Place no connection flag\u0026rsquo; icon ~no connection icon on the right toolbar. Click on the unconnected pins. An X will appear to signify that the lack of a wire connection is intentional.\n  It is now necessary to add a \u0026lsquo;Power Flag\u0026rsquo; to indicate to KiCad that power comes in from somewhere. Press a and search for \u0026lsquo;PWR_FLAG\u0026rsquo; which is in \u0026lsquo;power\u0026rsquo; library. Place two of them. Connect them to a GND pin and to VCC as shown below.\n  We can now check our schematic for errors. Click on the \u0026lsquo;Perform electrical rules check\u0026rsquo; icon on the top toolbar. Click on the \u0026lsquo;Run\u0026rsquo; button. A report informing you of any errors or warnings such as disconnected wires is generated. You should have 0 Errors and 0 Warnings. In case of errors or warnings, a small green arrow will appear on the schematic in the position where the error or the warning is located. Check \u0026lsquo;Create ERC file report\u0026rsquo; and press the \u0026lsquo;Run\u0026rsquo; button again to receive more information about the errors.  "
},
{
	"uri": "http://spdldaemon.github.io/docs/tools/",
	"title": "Tools",
	"tags": [],
	"description": "",
	"content": "Tools Tutorials, Tips, and Tricks for the various software and hardware tools you might encounter in lab.\n"
},
{
	"uri": "http://spdldaemon.github.io/docs/tools/kicad/",
	"title": "KiCad",
	"tags": [],
	"description": "",
	"content": "KiCad1 is an open-source software tool for the creation of electronic schematic diagrams and PCB artwork. Although essentially treated as one program, KiCad is really more of a tight grouping of the following stand-alone software tools:\n   Program name Description File extension     KiCad Project manager *.pro   Eeschema Schematic and component editor *.sch, *.lib, *.net   Pcbnew Circuit board and footprint editor *.kicad_pcb, *.kicad_mod   GerbView Gerber and drill file viewer *.g*, *.drl, etc.   Bitmap2Component Convert bitmap images to components or footprints *.lib, *.kicad_mod, *.kicad_wks   PCB Calculator Calculator for components, track width, electrical spacing, color codes, and more\u0026hellip; None   Pl Editor Page layout editor *.kicad_wks    The file extension list is not complete and only contains a subset of the files that KiCad supports. It is useful for the basic understanding of which files are used for each KiCad application. KiCad can be considered mature enough to be used for the successful development and maintenance of complex electronic boards.\n  KiCad basic window. The icon row from left to right corresponds to Eeschema (schematic and component editors), Pcbnew ( board and footprint editors), GerbView, Bitmap2Component, PCB Calculator, and Pl Editor.\n  This tutorial is written using KiCad 5.0.0 on Windows 10. While significant changes are unlikely, be aware that small details may change if your install is different.\n KiCad does not present any board-size limitation and it can easily handle up to 32 copper layers, up to 14 technical layers and up to 4 auxiliary layers. KiCad can create all the files necessary for building printed boards, Gerber files for photo-plotters, drilling files, component location files and a lot more.\nBeing open source (GPL licensed), KiCad represents the ideal tool for projects oriented towards the creation of electronic hardware with an open-source flavour.\nOn the Internet, the homepage of KiCad is: http://www.kicad-pcb.org/\nDownloading and installing KiCad KiCad runs on GNU/Linux, Apple macOS and Windows. You can find the most up to date instructions and download links at:\nhttp://www.kicad-pcb.org/download/\nUnder Apple macOS Stable builds of KiCad for macOS can be found at: http://downloads.kicad-pcb.org/osx/stable/\nUnder Windows Stable builds of KiCad for Windows can be found at: http://downloads.kicad-pcb.org/windows/stable/\nUnder GNU/Linux   Show Unix Installation Details   Stable releases of KiCad can be found in most distribution’s package managers as kicad and kicad-doc. If your distribution does not provide latest stable version, please follow the instruction for unstable builds and select and install the latest stable version.\nUnder Ubuntu, the easiest way to install an unstable nightly build of KiCad is via PPA and Aptitude. Type the following into your Terminal:\nsudo add-apt-repository ppa:js-reynaud/ppa-kicad sudo aptitude update \u0026amp;\u0026amp; sudo aptitude safe-upgrade sudo aptitude install kicad kicad-doc-en Under Debian, the easiest way to install backports build of KiCad is:\n# Set up Debian Backports echo -e \u0026#34; # stretch-backports deb http://ftp.us.debian.org/debian/ stretch-backports main contrib non-free deb-src http://ftp.us.debian.org/debian/ stretch-backports main contrib non-free \u0026#34; | sudo tee -a /etc/apt/sources.list \u0026gt; /dev/null # Run an Update \u0026amp; Install KiCad sudo apt-get update sudo apt-get install -t stretch-backports kicad Under Fedora the easiest way to install an unstable nightly build is via copr. To install KiCad via copr type the following in to copr:\nsudo dnf copr enable @kicad/kicad sudo dnf install kicad Alternatively, you can download and install a pre-compiled version of KiCad, or directly download the source code, compile and install KiCad.\n  KiCad Workflow Despite its similarities with other PCB design software, KiCad is characterised by a unique workflow in which schematic components and footprints are separate. Only after creating a schematic are footprints assigned to the components.\nOverview The KiCad workflow is comprised of two main tasks: drawing the schematic and laying out the board. Both a schematic component library and a PCB footprint library are necessary for these two tasks. KiCad includes many components and footprints, and also has the tools to create new ones.\nInitially, the process begins with schematic capture, as in any other tool. After the schematic has been defined, footprints are attached to each symbol on the schematic, and the information is then used to lay out the board.\nThe KiCad Tutorial has a detailed flowchart of the full board design process.\n Some Notes on Fabrication Both Oshpark (PCB only) and MacroFab(PCB + assembly) directly accept KiCad formats for fabrication. Naturally neither is the cheapest possible service, but for small projects the convenience can be an advantage.\n Adapted in part from the KiCad Getting Started Tutorial, CC-BY-3.0  .\n  Pronounced \u0026lsquo;Key-CAD\u0026rsquo;. \u0026#x21a9;\u0026#xfe0e;\n   "
},
{
	"uri": "http://spdldaemon.github.io/docs/datasheets/",
	"title": "Datasheets",
	"tags": [],
	"description": "",
	"content": "Datasheets Curated, sorted, datasheets for stuff you might encounter in lab.\n\u0026hellip;we're really just saving you a Google search in most cases.\n"
},
{
	"uri": "http://spdldaemon.github.io/docs/",
	"title": "The SPDL Docs Repository",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://spdldaemon.github.io/docs/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://spdldaemon.github.io/docs/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]